apply plugin: 'java'
apply plugin: 'maven'

group = 'etri'
version = '1.0'

sourceCompatibility = JavaVersion.VERSION_1_8
[compileJava,compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenLocal()
	maven {
		url "http://download.osgeo.org/webdav/geotools/"
	}
    mavenCentral()
	maven {
		name = 'dist'
		url = "file:${distRepositoryDir}"
	}
}

sourceSets {
	main {
		java {
			srcDir "src/main/java"
			srcDir "src/antlr4/java"
		}
	}
}

dependencies {
	compile project(':utils')

	compile "org.eclipse.jetty:jetty-servlet:9.2.10.v20150310"
	compile "com.h2database:h2:1.3.176"
	compile group: "com.fasterxml.jackson.core", name: "jackson-databind", version: "2.3.2"
	compile group: 'commons-cli', name: 'commons-cli', version: "1.3.1"
	compile group: 'org.glassfish.jersey.media', name: 'jersey-media-moxy', version: "2.17"
	
	// Jetty
	compile group: "org.glassfish.jersey.containers", name: "jersey-container-servlet", version: "2.17"
	
	// MQTT
	compile group: 'org.eclipse.paho', name: 'org.eclipse.paho.client.mqttv3', version: "1.0.2"
	
	// GeoTools
	compile group: 'org.geotools', name: 'gt-geojson', version: "${geotools_version}"

	// ANTLR
	compile group: 'org.antlr', name: 'antlr4', version: "4.5"
}

buildscript {
	repositories {
		mavenLocal()
		jcenter()
	}
	dependencies {
		classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
	}
}

apply plugin: 'com.github.johnrengelman.shadow'
shadowJar {
	classifier 'all'
	
	mergeServiceFiles()
	
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
}

task sourceJar(type: Jar) {
	classifier 'sources'
	from sourceSets.main.allSource
}

javadoc {
	options.charSet = 'UTF-8'
}

task javadocJar(type: Jar) {
	classifier 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourceJar
	archives javadocJar
	archives shadowJar
}

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: "file:${distRepositoryDir}")
		}
	}
}

task copyJarToBin(type: Copy) {
	dependsOn 'assemble'
	from "${buildDir}/libs/${archivesBaseName}-${version}-all.jar"
	into 'bin'
}

apply plugin: 'eclipse'
eclipse {
	classpath {
		file {
			withXml {
				def node = it.asNode()
				node.appendNode('classpathentry', [kind: 'output', path: 'classes'])
			}
		}
	}
}